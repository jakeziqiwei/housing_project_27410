fit.normal3 <- stan(file = "normal2.stan", data = stan.data3, iter = 10000, seed = SEED)
draws3 <- as.data.frame(fit.normal3);
# histogram of the posterior draws
# with prior and true posterior density
hist(draws3$mu, freq=F);
View(draws3)
stan.data3 <- list(n = 18, y = y, mu = 0,a= 0.0001, b=0.001);
fit.normal3 <- stan(file = "normal3.stan", data = stan.data3, iter = 10000, seed = SEED)
draws3 <- as.data.frame(fit.normal3);
# histogram of the posterior draws
# with prior and true posterior density
hist(draws3$mu, freq=F);
## Load R packages
library(tidyr)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 1)
library(loo)
library(invgamma)
library(ggplot2)
library(gridExtra)
library(bayesplot)
theme_set(bayesplot::theme_default(base_family = "sans"))
library(shinystan)
library(rprojroot)
SEED <- 48927 # set random seed for reproducability
y = c(29, 27, 34, 40, 22, 28, 14, 35, 26, 35, 12, 30, 23, 17, 11, 22, 23, 33);
ybar = 25.6;
n = 18
stan.data3 <- list(n = 18, y = y, mu = 0,a= 0.0001, b=0.001);
fit.normal3 <- stan(file = "normal3.stan", data = stan.data3, iter = 10000, seed = SEED)
draws3 <- as.data.frame(fit.normal3);
# histogram of the posterior draws
# with prior and true posterior density
hist(draws3$mu, freq=F);
View(draws3)
stan.data3 <- list(n = 18, y = y, mu0 = 0,sigma0 = 100, a = 0.0001, b=0.001);
fit.normal3 <- stan(file = "normal3.stan", data = stan.data3, iter = 10000, seed = SEED)
draws3 <- as.data.frame(fit.normal3);
# histogram of the posterior draws
# with prior and true posterior density
hist(draws3$mu, freq=F);
# - compare stan prediction
# - with R prediction
ypred = list();
# stan prediction
ypred = cbind(ypred = draws3$ypred[20*(1:1000)], type = rep(0, 1000));
# R prediction
temp = cbind(ypred = mu + sqrt(draws3$sigma2) * rnorm(1000), type = rep(1, 1000));
# combine
ypred = data.frame(rbind(ypred, temp));
ypred$type = as.factor(ypred$type)
levels(ypred$type) = c("Stan Pred", "R Pred");
ggplot(ypred, aes(x=ypred, y = ..density..)) +
geom_histogram(colour="black", fill="white") +
facet_wrap(~type,nrow=2);
# compare summary statistics
aggregate(ypred, ypred~type, FUN = summary)
# equal tail credible sets
quantile(ypred[1:1000, 1], c(0.025, 0.975))
quantile(ypred[1001:2000, 1], c(0.025, 0.975))
stan.data3 <- list(n = 18, y = y, mu0 = 0,sigma0 = 100, a = 0.0001, b=0.001);
fit.normal3 <- stan(file = "normal3.stan", data = stan.data3, iter = 10000, seed = SEED)
draws3 <- as.data.frame(fit.normal3);
# histogram of the posterior draws
# with prior and true posterior density
ggplot(draws3, aes(x = draws3$sigma2)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
labs(subtitle = "Histogram of sigma2") +
labs(caption = "Stan Samples (Case 2)") +
stat_function(fun = function(x){dinvgamma(x, a, b)}, aes(colour = "prior")) +
stat_function(fun = function(x){dinvgamma(x, shape = post.shape.sigma2, rate = post.rate.sigma2)}, aes(colour ="posterior")) +
labs(x = '', y = '') +
theme(legend.position = 'bottom') +
scale_colour_manual("", values = c("red", "blue"))
# - compare stan prediction
# - with R prediction
ypred = list();
# stan prediction
ypred = cbind(ypred = draws3$ypred[20*(1:1000)], type = rep(0, 1000));
# R prediction
temp = cbind(ypred = mu + sqrt(draws3$sigma2) * rnorm(1000), type = rep(1, 1000));
# combine
ypred = data.frame(rbind(ypred, temp));
ypred$type = as.factor(ypred$type)
levels(ypred$type) = c("Stan Pred", "R Pred");
ggplot(ypred, aes(x=ypred, y = ..density..)) +
geom_histogram(colour="black", fill="white") +
facet_wrap(~type,nrow=2);
# compare summary statistics
aggregate(ypred, ypred~type, FUN = summary)
# equal tail credible sets
quantile(ypred[1:1000, 1], c(0.025, 0.975))
quantile(ypred[1001:2000, 1], c(0.025, 0.975))
stan.data3 <- list(n = 18, y = y, mu0 = 0,sigma0 = 100, a = 0.0001, b=0.001);
fit.normal3 <- stan(file = "normal3.stan", data = stan.data3, iter = 10000, seed = SEED)
draws3 <- as.data.frame(fit.normal3);
# histogram of the posterior draws
# with prior and true posterior density
ggplot(draws3, aes(x = draws3$sigma2)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
labs(subtitle = "Histogram of sigma2") +
labs(caption = "Stan Samples (Case 2)") +
labs(x = '', y = '') +
theme(legend.position = 'bottom') +
scale_colour_manual("", values = c("red", "blue"))
# - compare stan prediction
# - with R prediction
ypred = list();
# stan prediction
ypred = cbind(ypred = draws3$ypred[20*(1:1000)], type = rep(0, 1000));
# R prediction
temp = cbind(ypred = mu + sqrt(draws3$sigma2) * rnorm(1000), type = rep(1, 1000));
# combine
ypred = data.frame(rbind(ypred, temp));
ypred$type = as.factor(ypred$type)
levels(ypred$type) = c("Stan Pred", "R Pred");
ggplot(ypred, aes(x=ypred, y = ..density..)) +
geom_histogram(colour="black", fill="white") +
facet_wrap(~type,nrow=2);
# compare summary statistics
aggregate(ypred, ypred~type, FUN = summary)
# equal tail credible sets
quantile(ypred[1:1000, 1], c(0.025, 0.975))
quantile(ypred[1001:2000, 1], c(0.025, 0.975))
stan.data3 <- list(n = 18, y = y, mu0 = 0,sigma0 = 100, a = 0.0001, b=0.001);
fit.normal3 <- stan(file = "normal3.stan", data = stan.data3, iter = 10000, seed = SEED)
draws3 <- as.data.frame(fit.normal3);
# histogram of the posterior draws
# with prior and true posterior density
ggplot(draws3, aes(x = draws3$sigma2)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
labs(subtitle = "Histogram of sigma2") +
labs(caption = "Stan Samples (Case 2)") +
labs(x = '', y = '') +
theme(legend.position = 'bottom') +
scale_colour_manual("", values = c("red", "blue"))
ggplot(draws3, aes(x = draws3$mu)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
labs(subtitle = "Histogram of sigma2") +
labs(caption = "Stan Samples (Case 2)") +
labs(x = '', y = '') +
theme(legend.position = 'bottom') +
scale_colour_manual("", values = c("red", "blue"))
# - compare stan prediction
# - with R prediction
ypred = list();
# stan prediction
ypred = cbind(ypred = draws3$ypred[20*(1:1000)], type = rep(0, 1000));
# R prediction
temp = cbind(ypred = mu + sqrt(draws3$sigma2) * rnorm(1000), type = rep(1, 1000));
# combine
ypred = data.frame(rbind(ypred, temp));
ypred$type = as.factor(ypred$type)
levels(ypred$type) = c("Stan Pred", "R Pred");
ggplot(ypred, aes(x=ypred, y = ..density..)) +
geom_histogram(colour="black", fill="white") +
facet_wrap(~type,nrow=2);
# compare summary statistics
aggregate(ypred, ypred~type, FUN = summary)
# equal tail credible sets
quantile(ypred[1:1000, 1], c(0.025, 0.975))
quantile(ypred[1001:2000, 1], c(0.025, 0.975))
ypred = draws3$mu + sqrt(draws3$sigma2) * rnorm(dim(draws3)[1]);
ypredhat = mean(ypred);
ci.lower = quantile(ypred, 0.025);
ci.upper = quantile(ypred, 0.975);
ypred = draws3$mu + sqrt(draws3$sigma2) * rnorm(dim(draws3)[1]);
ypredhat = mean(ypred);
ci.lower = quantile(ypred, 0.025);
ci.upper = quantile(ypred, 0.975);
ci.lower
ci.upper
stan.data3 <- list(n = 18, y = y, mu0 = 0,sigma0 = 100, a = 0.0001, b=0.001);
fit.normal3 <- stan(file = "normal3.stan", data = stan.data3, iter = 10000, seed = SEED)
draws3 <- as.data.frame(fit.normal3);
# histogram of the posterior draws
# with prior and true posterior density
ggplot(draws3, aes(x = draws3$sigma2)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
labs(subtitle = "Histogram of sigma2") +
labs(x = '', y = '') +
theme(legend.position = 'bottom') +
scale_colour_manual("", values = c("red", "blue"))
ggplot(draws3, aes(x = draws3$mu)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
labs(subtitle = "Histogram of mu") +
labs(x = '', y = '') +
theme(legend.position = 'bottom') +
scale_colour_manual("", values = c("red", "blue"))
# - compare stan prediction
# - with R prediction
ypred = list();
# stan prediction
ypred = cbind(ypred = draws3$ypred[20*(1:1000)], type = rep(0, 1000));
# R prediction
temp = cbind(ypred = mu + sqrt(draws3$sigma2) * rnorm(1000), type = rep(1, 1000));
# combine
ypred = data.frame(rbind(ypred, temp));
ypred$type = as.factor(ypred$type)
levels(ypred$type) = c("Stan Pred", "R Pred");
ggplot(ypred, aes(x=ypred, y = ..density..)) +
geom_histogram(colour="black", fill="white") +
facet_wrap(~type,nrow=2);
# compare summary statistics
aggregate(ypred, ypred~type, FUN = summary)
# equal tail credible sets
quantile(ypred[1:1000, 1], c(0.025, 0.975))
quantile(ypred[1001:2000, 1], c(0.025, 0.975))
stan.data3 <- list(n = 18, y = y, mu0 = 0,sigma0 = 100, a = 0.0001, b=0.001);
fit.normal3 <- stan(file = "normal3.stan", data = stan.data3, iter = 10000, seed = SEED)
draws3 <- as.data.frame(fit.normal3);
# histogram of the posterior draws
# with prior and true posterior density
ggplot(draws3, aes(x = draws3$sigma2)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
labs(subtitle = "Histogram of sigma2") +
labs(x = '', y = '') +
theme(legend.position = 'bottom') +
scale_colour_manual("", values = c("red", "blue"))
ggplot(draws3, aes(x = draws3$mu)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
labs(subtitle = "Histogram of mu") +
labs(x = '', y = '') +
theme(legend.position = 'bottom') +
scale_colour_manual("", values = c("red", "blue"))
# - compare stan prediction
# - with R prediction
ypred = list();
# stan prediction
ypred = cbind(ypred = draws3$ypred[20*(1:1000)], type = rep(0, 1000));
# R prediction
temp = cbind(ypred = draw3$mu + sqrt(draws3$sigma2) * rnorm(1000), type = rep(1, 1000));
stan.data3 <- list(n = 18, y = y, mu0 = 0,sigma0 = 100, a = 0.0001, b=0.001);
fit.normal3 <- stan(file = "normal3.stan", data = stan.data3, iter = 10000, seed = SEED)
draws3 <- as.data.frame(fit.normal3);
# histogram of the posterior draws
# with prior and true posterior density
ggplot(draws3, aes(x = draws3$sigma2)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
labs(subtitle = "Histogram of sigma2") +
labs(x = '', y = '') +
theme(legend.position = 'bottom') +
scale_colour_manual("", values = c("red", "blue"))
ggplot(draws3, aes(x = draws3$mu)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
labs(subtitle = "Histogram of mu") +
labs(x = '', y = '') +
theme(legend.position = 'bottom') +
scale_colour_manual("", values = c("red", "blue"))
# - compare stan prediction
# - with R prediction
ypred = list();
# stan prediction
# R prediction
temp = cbind(ypred = draw3$mu + sqrt(draws3$sigma2) * rnorm(dim(draws3)[1];
stan.data3 <- list(n = 18, y = y, mu0 = 0,sigma0 = 100, a = 0.0001, b=0.001);
fit.normal3 <- stan(file = "normal3.stan", data = stan.data3, iter = 10000, seed = SEED)
draws3 <- as.data.frame(fit.normal3);
# histogram of the posterior draws
# with prior and true posterior density
ggplot(draws3, aes(x = draws3$sigma2)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
labs(subtitle = "Histogram of sigma2") +
labs(x = '', y = '') +
theme(legend.position = 'bottom') +
scale_colour_manual("", values = c("red", "blue"))
ggplot(draws3, aes(x = draws3$mu)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
labs(subtitle = "Histogram of mu") +
labs(x = '', y = '') +
theme(legend.position = 'bottom') +
scale_colour_manual("", values = c("red", "blue"))
# - compare stan prediction
# - with R prediction
ypred = list();
# stan prediction
# R prediction
temp = cbind(ypred = draw3$mu + sqrt(draws3$sigma2) * rnorm(dim(draws3)[1];
stan.data3 <- list(n = 18, y = y, mu0 = 0,sigma0 = 100, a = 0.0001, b=0.001);
fit.normal3 <- stan(file = "normal3.stan", data = stan.data3, iter = 10000, seed = SEED)
draws3 <- as.data.frame(fit.normal3);
# histogram of the posterior draws
# with prior and true posterior density
ggplot(draws3, aes(x = draws3$sigma2)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
labs(subtitle = "Histogram of sigma2") +
labs(x = '', y = '') +
theme(legend.position = 'bottom') +
scale_colour_manual("", values = c("red", "blue"))
ggplot(draws3, aes(x = draws3$mu)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
labs(subtitle = "Histogram of mu") +
labs(x = '', y = '') +
theme(legend.position = 'bottom') +
scale_colour_manual("", values = c("red", "blue"))
quantile(draws3$mu, probs=c(0.025, 0.975));
quantile(draws3$sigma2, probs=c(0.025, 0.975));
# compare summary statistics
aggregate(ypred, ypred~type, FUN = summary)
stan.data3 <- list(n = 18, y = y, mu0 = 0,sigma0 = 100, a = 0.0001, b=0.001);
fit.normal3 <- stan(file = "normal3.stan", data = stan.data3, iter = 10000, seed = SEED)
draws3 <- as.data.frame(fit.normal3);
# histogram of the posterior draws
# with prior and true posterior density
ggplot(draws3, aes(x = draws3$sigma2)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
labs(subtitle = "Histogram of sigma2") +
labs(x = '', y = '') +
theme(legend.position = 'bottom') +
scale_colour_manual("", values = c("red", "blue"))
ggplot(draws3, aes(x = draws3$mu)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
labs(subtitle = "Histogram of mu") +
labs(x = '', y = '') +
theme(legend.position = 'bottom') +
scale_colour_manual("", values = c("red", "blue"))
quantile(draws3$mu, probs=c(0.025, 0.975));
quantile(draws3$sigma2, probs=c(0.025, 0.975));
# compare summary statistics
ypred = draws3$mu + sqrt(draws3$sigma2) * rnorm(dim(draws3)[1]);
quantile(ypred[1:1000, 1], c(0.025, 0.975))
stan.data3 <- list(n = 18, y = y, mu0 = 0,sigma0 = 100, a = 0.0001, b=0.001);
fit.normal3 <- stan(file = "normal3.stan", data = stan.data3, iter = 10000, seed = SEED)
draws3 <- as.data.frame(fit.normal3);
# histogram of the posterior draws
# with prior and true posterior density
ggplot(draws3, aes(x = draws3$sigma2)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
labs(subtitle = "Histogram of sigma2") +
labs(x = '', y = '') +
theme(legend.position = 'bottom') +
scale_colour_manual("", values = c("red", "blue"))
ggplot(draws3, aes(x = draws3$mu)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
labs(subtitle = "Histogram of mu") +
labs(x = '', y = '') +
theme(legend.position = 'bottom') +
scale_colour_manual("", values = c("red", "blue"))
quantile(draws3$mu, probs=c(0.025, 0.975));
quantile(draws3$sigma2, probs=c(0.025, 0.975));
# compare summary statistics
ypred = draws3$mu + sqrt(draws3$sigma2) * rnorm(dim(draws3)[1]);
quantile(ypred,c(0.025, 0.975))
quantile(ypred, c(0.025, 0.975))
# equal tail credible sets
quantile(ypred,c(0.025, 0.025))
stan.data3 <- list(n = 18, y = y, mu0 = 0,sigma0 = 100, a = 0.0001, b=0.001);
fit.normal3 <- stan(file = "normal3.stan", data = stan.data3, iter = 10000, seed = SEED)
draws3 <- as.data.frame(fit.normal3);
# histogram of the posterior draws
# with prior and true posterior density
ggplot(draws3, aes(x = draws3$sigma2)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
labs(subtitle = "Histogram of sigma2") +
labs(x = '', y = '') +
theme(legend.position = 'bottom') +
scale_colour_manual("", values = c("red", "blue"))
ggplot(draws3, aes(x = draws3$mu)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
labs(subtitle = "Histogram of mu") +
labs(x = '', y = '') +
theme(legend.position = 'bottom') +
scale_colour_manual("", values = c("red", "blue"))
quantile(draws3$mu, probs=c(0.025, 0.975));
quantile(draws3$sigma2, probs=c(0.025, 0.975));
# compare summary statistics
ypred = draws3$mu + sqrt(draws3$sigma2) * rnorm(dim(draws3)[1]);
quantile(ypred,c(0.025, 0.025))
quantile(ypred, c(0.025, 0.975))
# equal tail credible sets
stan.data3 <- list(n = 18, y = y, mu0 = 0,sigma0 = 100, a = 0.0001, b=0.001);
fit.normal3 <- stan(file = "normal3.stan", data = stan.data3, iter = 10000, seed = SEED)
draws3 <- as.data.frame(fit.normal3);
# histogram of the posterior draws
# with prior and true posterior density
ggplot(draws3, aes(x = draws3$sigma2)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
labs(subtitle = "Histogram of sigma2") +
labs(x = '', y = '') +
theme(legend.position = 'bottom') +
scale_colour_manual("", values = c("red", "blue"))
ggplot(draws3, aes(x = draws3$mu)) +
geom_histogram(aes(y=..density..), colour="black", fill="white") +
labs(subtitle = "Histogram of mu") +
labs(x = '', y = '') +
theme(legend.position = 'bottom') +
scale_colour_manual("", values = c("red", "blue"))
quantile(draws3$mu, probs=c(0.025, 0.975));
quantile(draws3$sigma2, probs=c(0.025, 0.975));
# compare summary statistics
ypred = draws3$mu + sqrt(draws3$sigma2) * rnorm(dim(draws3)[1]);
quantile(ypred,c(0.025, 0.025))
quantile(ypred, c(0.025, 0.975))
# equal tail credible sets
hist(ypred, freq=F)
means = colMeans(numerical_features_clean, na.rm = TRUE)
numerical_features_clean_substracted <- numerical_features_clean
for (i in seq_along(df)) {
numerical_features_clean_substracted[, i] <- ifelse(is.na(numerical_features_clean[, i]), NA, numerical_features_clean[, i] - means[i])
}
stargazer(numerical_features_clean_substracted,type = "latex",title = "Summary of Centered Data", header=F)
library(knitr)
knitr::opts_chunk$set(message=F, warning=F)
options(scipen=6, digits=6)
library(tidyverse)
library(ggplot2)
library(ggcorrplot)
library(mosaic)
library(car)
library(MASS)
library(broom)
library(xtable)
library(stargazer)
data <- read.csv('nydata.csv')
numerical_features <- data[3:9]
categorical_features <- data[10:11]
price = summary(as.data.frame(data$price))
num_and_price <- data[c(3:9,12)]
stargazer(num_and_price,type='latex', title = "Summary for Numerical Features", header = FALSE)
features <- c("latitude", "longitude", "accommodates", "beds", "minimum_nights", "number_of_reviews", "review_scores_rating")
for (i in 1:ncol(numerical_features)) {
p <- ggplot(numerical_features, aes(x = numerical_features[[i]])) +
geom_density(fill = "skyblue", color = "black") +
labs(title = paste("Density Plot of Feature", features[i]), x = features[i], y = "Density") +
theme_minimal()
plot(p)  # Print each plot
}
#clean data
data_clean = subset(data,price <= 500 & minimum_nights <= 30)
numerical_features_clean <- data_clean[3:9]
categorical_features_clean <- data_clean[10:11]
price_clean <- data_clean$price
display <- data.frame(cbind(numerical_features_clean,price_clean))
stargazer(display,type='latex', title = "Figure 2: Summary Stat for Cleaned Numerical Features",header = FALSE)
#graph again
for (i in 1:ncol(numerical_features_clean)) {
p <- ggplot(numerical_features_clean, aes(x = numerical_features_clean[[i]])) +
geom_density(fill = "skyblue", color = "black") +
labs(title = paste("Density Plot of Feature", features[i]), x = features[i], y = "Density") +
theme_minimal()
print(p)  # Print each plot
}
pairs(numerical_features_clean, main = "Figure 1: Pairs Plot")
cor_matrix <- cor(numerical_features_clean)
ggcorrplot(cor_matrix) + ggtitle("Figure 2: Correlation Heat Map")
#graphs with the categorical features
ggplot(categorical_features_clean, aes(x = categorical_features_clean$room_type)) +
geom_bar(stat = "count", fill = "skyblue", color = "black") +
labs(title = "Figure 4: Type of Housing Count Plot", x = "Category", y = "Count") +
theme_minimal()
neighborhood_Price <- data_clean[11:12]
summary_price <- neighborhood_Price %>%
group_by(neighbourhood_cleansed) %>%
summarise(mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
total_listings = n())
summary_price <- as.data.frame(summary_price[0:30,])
stargazer(summary_price,type='latex', summary=F, title = "Summary Stat by Neighborhood", header = FALSE)
airbnb24 <- read.csv('ny_ny.24.csv')
airbnb24$rating[is.na(airbnb24$rating)] <- mean(airbnb24$rating, na.rm = TRUE)
airbnb24$logP <- log(airbnb24$price)
UES <- subset(airbnb24, area == "Upper East Side")
lmUES = lm(logP ~ log(accommodates) + bathrooms + log(min_nights) + room_type + beds, data=UES)
lm24 = lm(price ~ as.factor(area) + accommodates + bathrooms + min_nights +
as.factor(room_type) + beds + rating, data=airbnb24)
log24 = lm(log(price) ~ as.factor(area) + accommodates + bathrooms + min_nights +
as.factor(room_type) + beds, data=airbnb24)
## Residuals vs. Y
ggplot(airbnb24, aes(x=as.factor(area), y=price)) + geom_point() +
xlab("Area") + ylab("Price") + labs(title="Figure 4: Area vs. Price") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
ggplot(airbnb24, aes(x=as.factor(area), y=log(price))) + geom_point() +
xlab("Area") + ylab("Log of Price") + labs(title="Figure 5: Area vs. Log(Price)") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
## Residuals vs. fitted values
ggplot(airbnb24, aes(x=lm24$fit, y=lm24$res)) + geom_point() +
xlab("Fitted Values") + ylab("Residuals") + labs(title = "Figure 5: Without Log Transformation") +
geom_hline(yintercept = 0, col=2)
ggplot(airbnb24, aes(x=log24$fit, y=log24$res)) + geom_point() +
xlab("Log Fitted Values") + ylab("Residuals") + labs(title = "Figure 6: With Log Transformation") +
geom_hline(yintercept = 0, col=2)
lm1 = lm(log(price) ~ (accommodates) + (min_nights)  + (rating)+ (bathrooms)
+ rating + as.factor(room_type) +as.factor(area)*(bathrooms)
+ as.factor(room_type)*(accommodates), data=airbnb24)
mod1 <- anova(lm1,log24)
stargazer(mod1,summary = FALSE, type = "latex", title = "Anova for 2 models", header = FALSE)
aic_bic_df <- data.frame(
Name = c("Log Interaction Model", "Log Linear Model","Linear Model"),
AIC = c(AIC(lm1), AIC(log24), AIC(lm24)),
BIC = c(BIC(lm1), BIC(log24), BIC(lm24))
)
stargazer(aic_bic_df,summary = FALSE, type = "latex",title = "Figure 12: AIC/BIC for 3 Models",header = FALSE)
stargazer(means_sds_by_area[1:30,],summary = FALSE, type = "latex",title = "Mean and SD by neighborhoods", header = FALSE)
predicted_values <- predict(lm1)
# Mean of predicted values
mean_predicted <- mean(predicted_values)
sd_predicted <- sd(predicted_values)
airbnb24$predicted <- predicted_values
means_by_area <- aggregate(predicted ~ area, data = airbnb24, FUN = mean)
sds_by_area <- aggregate(predicted ~ area, data = airbnb24, FUN = sd)
means_sds_by_area <- merge(means_by_area, sds_by_area, by = "area")
colnames(means_sds_by_area) <- c("area", "Log predicted_mean", "Log predicted_sd")
stargazer(means_sds_by_area[1:30,],summary = FALSE, type = "latex",title = "Mean and SD by neighborhoods", header = FALSE)
means = colMeans(numerical_features_clean, na.rm = TRUE)
numerical_features_clean_substracted <- numerical_features_clean
for (i in seq_along(df)) {
numerical_features_clean_substracted[, i] <- ifelse(is.na(numerical_features_clean[, i]), NA, numerical_features_clean[, i] - means[i])
}
stargazer(numerical_features_clean_substracted,type = "latex",title = "Summary of Centered Data", header=F)
